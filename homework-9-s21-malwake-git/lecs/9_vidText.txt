So besides the unpleasant fact that wireless transmissions can interfere with one another and cause collisions in the first place, it's another unpleasant fact of wireless transmissions that the sensing range, or what each transmitter can sense in its vicinity, is not going to be the same as its interfering range. It might happen that stations A and B collide but they cannot hear each other.

An example is shown in this diagram here, we have three stations A, B, and C. A and C are both trying to send to B in the middle, but A and C cannot sense each other's presence, because A's sensing range is denoted by the circle around A and C's sensing range is denoted by the circle around C. So they can't sense each other but they can certainly collide with each other, and they are both going to collide at B which is where they are trying to send in the first place.

This leads to the hidden node problem. It is a famous problem, one of the performance bottlenecks at WiFi hotspots. Station A and C's transmissions can interfere with each other, but they cannot sense each other.

There is a clever solution to this that uses a little bit of explicit message passing. It's called RTS CTS, or Request to Send Clear to Send. When a station A wants to send a frame, it will first send a short control message, obviously this control message will be much shorter than the actual data, called a request to send. So A sends this RTS saying that it wants a request back from its receiver that it's OK for it to send this information. Now all stations that are in sensing range of station A will also receive this message. So if A is sending an RTS anyone else in its sensing range will also get it. All stations in its sensing range will in turn send a short control message called a clear to send. So they will say yes A you are clear to send. A is waiting for the CTS from all the guys in its interference range, and particular it is waiting for the CTS from its receiver B, B will send its CTS back.

Of course station A itself is going to get the CTS message, and when it sees that CTS, it knows all the hidden nodes, all of B's hidden nodes because when B sends it it's going to send that CTS to all the stations that are within B's sensing range, one of which is C, so C is going to receive this CTS, and A at that point will know that any hidden nodes it can't see but are in interference range but not in sensing range will have received it. And thus is knows that those hidden nodes will not send any frames now. At that point station A can begin to send its actual frames.

So again, node A is first going to send its RTS, upon hearing the RTS all nodes which includes node B are going to send a CTS back. Upon hearing the CTS, all the nodes including node C which is the one that was a hidden node to A in the first place will remain silent for a period of time, because they know that another station has been cleared to transmit in that range. And that is of course instead of A itself which initiated the RTS, so now A knows it is cleared to send data.

So you can see a basic diagram of RTS CTS in this figure. The sender starts with an RTS, then it waits for a small period of time a SIFS period to be exact before it sends a CTS back. Then once it receives that CTS its going to wait another small period called the SIFS before it starts to actually transmit its data. If the transmitter receives the CTS, it will wait another SIFS and begin transmitting. If the transmitter does not receive its CTS, then the RTS message itself is going to go through backoff. So the RTS message will then be treated as it was with data, and it has to go through those contention management mechanisms.

So the wait and listen times for RTS CTS is the same as the wait and listen time for the ACKs. These both have a SIFS period. Whereas data transmissions themselves when we go through a wait and listen period outside of this, that has a DIFS period, which is longer. This is yet another clever idea in distributed coordination in wireless networks, because by creating multiple types of wait and listen intervals, those transmissions only need then to wait a shorter wait and listen interval are essentially given a higher priority. So those which have already received RTS or are waiting to receive a CTS back will have higher priority over those that are not expecting these back.

Now RTS CTS is not a perfect solution because for example RTS CTS frames themselves may also collide with other frames and then they have to go through backoff and so forth. Still, with this RTS CTS message passing protocol together with prioritization through different wait and listen intervals, so we'll say message passing is one property here, prioritization is another property that we've seen here, distributed transmission through randomized transmit timing, so randomization, again one of the key ideas of CSMA, and content resolution through an exponentially backed off contention window, so it has a contention window, and the idea of exponential backoff. With all of these properties together, message passing prioritization randomization, contention window, and exponential backoff, we get quite a distributed MAC protocol that enables the operation of WiFi hotspots as they scale up.

Now this multi-frame RTS CTS transmission procedure requires sending an RTS waiting a little time and waiting for a CTS back consumes a fair amount of capacity, especially due to the latency that is incurred before transmission can commence. So we have this whole period of time after a DIFS period that we have to wait before transmission can actually happen. So in practice it's typically only used in high capacity environments, and environments with significant contention on transmission for example if you were in a sports arena and you had a lot of people that were trying to send to an access point that might be a place where we would use RTS CTS or if we were in an office building and a lot of people were using the WiFi RTS CTS may be enabled. But for lower capacity environments like in your home its typically not necessary. So we want to write here its typically only used for high capacity environments. And in fact, in your home where there's only maybe 2 or 3 devices it could do more harm than it does good because it's going to incur this additional latency and this added latency here may not be worth the fact that we're having RTS CTS enabled.