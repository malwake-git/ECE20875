Before we move into CSMA and study that in detail there's a simpler random access protocol that we will describe here. It's called ALOHA, it was invented in the early 1970s at the University of Hawaii, so therefore calling it ALOHA was no coincidence.

The slotted version of the ALOHA, when time is divided into different slots and each slot is the length of one packet of data, so if this is the full set of timeslots, or just four of those timeslots, each of those slots is going to be equal to the length of one packet of data. A packet of data is going to fit exactly into one of those timeslots.

This version is very easy to describe. We're going to assume that there are N stations that are contending with one another, which means that at any point in time, the station has something that it wants to send. So we're not going to have times in this protocol where nobody has anything they want to send.

With ALOHA there's no coordination between the stations, and no channel sensing at all. It's a very simple protocol and a very naive and unsophisticated protocol, but it's very useful for purposes of studying throughout and seeing how it's modeled.

The way it works is that at each of the timeslots, at timeslot 1, timeslot 2, timeslot 3, a station is going to go through this process. It's going to transmit with a fixed probability p, p could be between 0 and 1, 0 meaning that it never transmits and 1 meaning that it always transmits, and therefore it's going to refrain from transmitting with probability 1 - p, because if p is the probability of transmitting then the probability of not transmitting is 1 - p.

So this figure here is an example of how that might play out if we have three stations A, B, and C, in the first timeslot maybe just A transmits and B and C don't. In the second timeslot maybe B and C both transmit. Now that will lead to a collision, and as we said before, whenever a collision happens, if two or more frames are transmitting in one timeslot, that is going to lead to both being lost. Both or all if there's more than two being lost.

Each lost packet will be retransmitted with a probability p as well. And we're going to assume that this process continues until a packet is eventually transmitted successfully. So if a packet is lost it's going to be tried to retransmit, and if it's lost again it's going to attempt retransmission as well. So the question is how does a station know if a packet is going to be lost or not? In this case it can tell if it has suffered a collision because it can sense whether or not another transmission ended up occurring in that same timeslot. So if we had say stations A, B, and C and then in one timeslot A tried to transmit something and B also happens to transmit something, A is going to be able to sense that B also transmitted if they are in sensing range of one another, and therefore A will know that that packet was probably lost.

And also in general a packet may not have the same length as a timeslot, so one of these packets could technically be longer or shorter than the length of the timeslot, and that depends on how exactly a packet is defined, and on the transmission speed of the link. Some links can send things much quicker than others because of the hardware they are built of.

But that's not going to affect our analysis because packets can be and typically are fragmented and sent over multiple timeslots anyway, so if we have one large packet of data chances are that it's going to be split up into multiple pieces and sent in shorter fragments anyway.

So now we're interested in finding how the total throughput of the system varies as a function of N, which is the number of stations that are contending, and p, which is the probability of transmitting. Since each timeslot is identical for this simple protocol, we just need to find the expected throughput in each slot, and that's going to give us the throughput overall on average. So we first want to ask what is the probability of one station having a successful transmission at any given timeslot, and by one station we mean any particular station, say station A, or it could be station B, or station C, it's going to be the same logic for any one of those stations.

So there's only one case in which one station will have a successful transmission. We need this one station to transmit, say A transmits and the rest do not transmit. So we need exactly one transmission to happen, and we need that transmission to be A's transmission.

So what's the probability that A is going to transmit at any timeslot? That's simple: by the definition of the protocol we said already that's just p. The probability that the rest of them do not transmit, the probability of any station not transmitting is 1 - p, and since we need all of them to not transmit we multiply these probabilities together, because they are independent events that happen together therefore we multiply them. So we have 1 - p for one of the stations, 1 - p for another one, and we keep multiplying through by all the remaining stations, and since there's N - 1 other stations, this is going to come out to be 1 - p to the N - 1 power. So therefore, the probability of one station having a successful transmission, say station A having a successful transmission, is going to be p times 1 - p to the N - 1 power. Again, station A has to transmit, and the remainder of the stations have to not transmit in this timeslot.

So then we can use that to find the total probability of a successful transmission, because this is just for one of the stations, for station A. But we have N stations that we have to go through this whole logic with, because this could just as easily be station B, station C, and so forth. So the total probability of a successful transmission then is going to be N p times 1 - p to the N - 1 because we're going through the same process for each of the N stations.

Then if we assume the channel supports 1 units of capacity, say 100 megabits per second, then this is actually also going to be the expected total throughput, which we call S for the total throughput S N comma p because it's a function of the number of stations N and p equals N times p times 1 - p to the N - 1. And that gives us the total throughput value that's normalized between 0 and 1, 0 meaning the total throughput is 0 and 1 meaning that it's exactly whatever the channel can support, the maximum possible throughput of the channel. So if the channel can support 100 megabits per second, S N p equal to 1 means we're getting 100 megabits per second. And if it's say 20, or .2, or 20 percent, that means we're getting 20 percent of that 100 megabits per second which would be 20 megabits per second.

So for example, suppose there are N equals 10 stations that are contending with one another, and the probability of transmission is p equals 0.3. We can find the expected total throughput over time,, each station is going to transmit in 30 percent of the possible timeslots because .3 is equal to 30%. In order for there to be a successful transmission we need one to transmit that has probability of 0.3 and each of the remaining not transmitting has probability of 0.7 1 minus .3 and N - 1 is 9 because that has to happen across all nine stations at once. So the probability of each of these events happening together is .3 times .7 to the ninth which is 0.0121. And since there are 10 stations in total, we multiply that by 10 to get S of 10 comma 0.3 equals 0.121 which is also 12.1 percent. We're getting 12% of the possible throughput that could be provided by the channel.

So 12 percent is obviously not very high, but the question we have to ask is, is this the best choice of p, is .3 the best choice of p for ten stations to maximize the throughput. And we'll investigate this next. As a bit of foreshadowing and looking ahead here, it turns out that even if we do optimize p for the number of stations the maximum total throughput is still going to be relatively low. That's the price we pay for having these simple protocols.