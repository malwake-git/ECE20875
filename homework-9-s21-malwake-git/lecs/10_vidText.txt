Let's now look at an example of RTS CTS coupled with backoff to illustrate the terms we have been talking about a bit more clearly. Consider three stations A B and C that are in a basic service set, BSS, station B is the access point that A and C are both associated with, and A and C are therefore trying to send to B.

The transmission and sensing ranges of each station are shown here, so B can sense both A and C but A cannot sense C and C cannot sense A, and therefore A and C are hidden from each other's perspective.

Assuming RTS CTS is enabled, this depicts a potential timing diagram of outcomes. So after appropriate backoff and wait and listen periods which would have happened out here, A and C both send RTS messages. These RTS messages end up colliding at station B since they were overlapping in time. So as a result no CTS message is sent to either A or C from B, so there's no CTS here. Remember, even RTS and even CTS messages can collide, it doesn't have to be just data or acknowledgments that are colliding.

So then after a short SIFS period, A and C realize that there is no CTS coming, so they both go through a longer DIFS period, and then they enter their contention period. At this point they would have increased their contention window sizes to 2 to the w+1 - 1 as we discussed, whatever w happens to be for each of the stations at this time. So they double their window sizes and then they choose random numbers accordingly. It turns out that the initial backoff counter chosen by C happens to be much smaller than the one chosen by A. So C sends an RTS message first, and after a brief period, it receives a CTS message back.

Now importantly, A does not know that C sent its RTS message. So it's still in its contention period at this point. It's not until it sees the CTS message coming back from B which it can sense, because A is in B's sensing range so A can see that CTS coming back that it realizes the channel is busy and that it cannot sense and that it cannot send any messages. So the CTS message serves two purposes here. It clears C for transmission. So the first purpose is that it clears C for transmission. And the second one is that it tells A that the channel will be busy until the data and ACK have been sent.

So then, C begins transmission after a SIFS period, and once C is done transmitting B waits another SIFS and responds with an acknowledgment that comes back to C. So now C knows that its data was properly received. After the acknowledgment comes back, A will sense the acknowledgment being sent, A will go through another wait and listen DIFS period, and then A will finish off its contention period. Again it will start from wherever it left off while it was decrementing and it will start decrementing again in the periods here it will decrement each time it senses one as being idle. After the contention period is ended, A then sends an RTS message, which is received by B, and then after a SIFS period B will respond with a CTS accordingly.

This is how RTS CTS works. If we did not have RTS CTS enabled, A and C would not be able to sense each other's presences, so they would keep backing off because they would not receive acknowledgments.